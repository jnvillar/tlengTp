Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expr
Rule 2     expr -> expr expr
Rule 3     expr -> ZERO
Rule 4     expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
Rule 5     expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
Rule 6     expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
Rule 7     expr -> NUMBER
Rule 8     expr -> TRUE
Rule 9     expr -> FALSE
Rule 10    expr -> IF expr THEN expr ELSE expr
Rule 11    expr -> VARIABLE
Rule 12    expr -> BACKSLASH expr 2DOTS funcionType DOT expr
Rule 13    funcionType -> TYPE funcImg
Rule 14    funcImg -> ARROW funcionType
Rule 15    funcImg -> <empty>

Terminals, with rules where they appear

2DOTS                : 12
ARROW                : 14
BACKSLASH            : 12
CLOSEPARENTHESIS     : 4 5 6
DOT                  : 12
ELSE                 : 10
FALSE                : 9
IF                   : 10
ISZERO               : 6
NUMBER               : 7
OPENPARENTHESIS      : 4 5 6
PRED                 : 4
SUCC                 : 5
THEN                 : 10
TRUE                 : 8
TYPE                 : 13
VARIABLE             : 11
ZERO                 : 3
error                : 

Nonterminals, with rules where they appear

expr                 : 1 2 2 4 5 6 10 10 10 12 12
expression           : 0
funcImg              : 13
funcionType          : 12 14

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 3
    expression                     shift and go to state 10

state 1

    (9) expr -> FALSE .

    CLOSEPARENTHESIS reduce using rule 9 (expr -> FALSE .)
    ZERO            reduce using rule 9 (expr -> FALSE .)
    PRED            reduce using rule 9 (expr -> FALSE .)
    SUCC            reduce using rule 9 (expr -> FALSE .)
    ISZERO          reduce using rule 9 (expr -> FALSE .)
    NUMBER          reduce using rule 9 (expr -> FALSE .)
    TRUE            reduce using rule 9 (expr -> FALSE .)
    FALSE           reduce using rule 9 (expr -> FALSE .)
    IF              reduce using rule 9 (expr -> FALSE .)
    VARIABLE        reduce using rule 9 (expr -> FALSE .)
    BACKSLASH       reduce using rule 9 (expr -> FALSE .)
    $end            reduce using rule 9 (expr -> FALSE .)
    2DOTS           reduce using rule 9 (expr -> FALSE .)
    THEN            reduce using rule 9 (expr -> FALSE .)
    ELSE            reduce using rule 9 (expr -> FALSE .)


state 2

    (12) expr -> BACKSLASH . expr 2DOTS funcionType DOT expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 13

state 3

    (1) expression -> expr .
    (2) expr -> expr . expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    $end            reduce using rule 1 (expression -> expr .)
    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 14

state 4

    (5) expr -> SUCC . OPENPARENTHESIS expr CLOSEPARENTHESIS

    OPENPARENTHESIS shift and go to state 15


state 5

    (7) expr -> NUMBER .

    CLOSEPARENTHESIS reduce using rule 7 (expr -> NUMBER .)
    ZERO            reduce using rule 7 (expr -> NUMBER .)
    PRED            reduce using rule 7 (expr -> NUMBER .)
    SUCC            reduce using rule 7 (expr -> NUMBER .)
    ISZERO          reduce using rule 7 (expr -> NUMBER .)
    NUMBER          reduce using rule 7 (expr -> NUMBER .)
    TRUE            reduce using rule 7 (expr -> NUMBER .)
    FALSE           reduce using rule 7 (expr -> NUMBER .)
    IF              reduce using rule 7 (expr -> NUMBER .)
    VARIABLE        reduce using rule 7 (expr -> NUMBER .)
    BACKSLASH       reduce using rule 7 (expr -> NUMBER .)
    $end            reduce using rule 7 (expr -> NUMBER .)
    2DOTS           reduce using rule 7 (expr -> NUMBER .)
    THEN            reduce using rule 7 (expr -> NUMBER .)
    ELSE            reduce using rule 7 (expr -> NUMBER .)


state 6

    (11) expr -> VARIABLE .

    CLOSEPARENTHESIS reduce using rule 11 (expr -> VARIABLE .)
    ZERO            reduce using rule 11 (expr -> VARIABLE .)
    PRED            reduce using rule 11 (expr -> VARIABLE .)
    SUCC            reduce using rule 11 (expr -> VARIABLE .)
    ISZERO          reduce using rule 11 (expr -> VARIABLE .)
    NUMBER          reduce using rule 11 (expr -> VARIABLE .)
    TRUE            reduce using rule 11 (expr -> VARIABLE .)
    FALSE           reduce using rule 11 (expr -> VARIABLE .)
    IF              reduce using rule 11 (expr -> VARIABLE .)
    VARIABLE        reduce using rule 11 (expr -> VARIABLE .)
    BACKSLASH       reduce using rule 11 (expr -> VARIABLE .)
    $end            reduce using rule 11 (expr -> VARIABLE .)
    2DOTS           reduce using rule 11 (expr -> VARIABLE .)
    THEN            reduce using rule 11 (expr -> VARIABLE .)
    ELSE            reduce using rule 11 (expr -> VARIABLE .)


state 7

    (3) expr -> ZERO .

    CLOSEPARENTHESIS reduce using rule 3 (expr -> ZERO .)
    ZERO            reduce using rule 3 (expr -> ZERO .)
    PRED            reduce using rule 3 (expr -> ZERO .)
    SUCC            reduce using rule 3 (expr -> ZERO .)
    ISZERO          reduce using rule 3 (expr -> ZERO .)
    NUMBER          reduce using rule 3 (expr -> ZERO .)
    TRUE            reduce using rule 3 (expr -> ZERO .)
    FALSE           reduce using rule 3 (expr -> ZERO .)
    IF              reduce using rule 3 (expr -> ZERO .)
    VARIABLE        reduce using rule 3 (expr -> ZERO .)
    BACKSLASH       reduce using rule 3 (expr -> ZERO .)
    $end            reduce using rule 3 (expr -> ZERO .)
    2DOTS           reduce using rule 3 (expr -> ZERO .)
    THEN            reduce using rule 3 (expr -> ZERO .)
    ELSE            reduce using rule 3 (expr -> ZERO .)


state 8

    (4) expr -> PRED . OPENPARENTHESIS expr CLOSEPARENTHESIS

    OPENPARENTHESIS shift and go to state 16


state 9

    (6) expr -> ISZERO . OPENPARENTHESIS expr CLOSEPARENTHESIS

    OPENPARENTHESIS shift and go to state 17


state 10

    (0) S' -> expression .



state 11

    (8) expr -> TRUE .

    CLOSEPARENTHESIS reduce using rule 8 (expr -> TRUE .)
    ZERO            reduce using rule 8 (expr -> TRUE .)
    PRED            reduce using rule 8 (expr -> TRUE .)
    SUCC            reduce using rule 8 (expr -> TRUE .)
    ISZERO          reduce using rule 8 (expr -> TRUE .)
    NUMBER          reduce using rule 8 (expr -> TRUE .)
    TRUE            reduce using rule 8 (expr -> TRUE .)
    FALSE           reduce using rule 8 (expr -> TRUE .)
    IF              reduce using rule 8 (expr -> TRUE .)
    VARIABLE        reduce using rule 8 (expr -> TRUE .)
    BACKSLASH       reduce using rule 8 (expr -> TRUE .)
    $end            reduce using rule 8 (expr -> TRUE .)
    2DOTS           reduce using rule 8 (expr -> TRUE .)
    THEN            reduce using rule 8 (expr -> TRUE .)
    ELSE            reduce using rule 8 (expr -> TRUE .)


state 12

    (10) expr -> IF . expr THEN expr ELSE expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 18

state 13

    (12) expr -> BACKSLASH expr . 2DOTS funcionType DOT expr
    (2) expr -> expr . expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    2DOTS           shift and go to state 19
    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 14

state 14

    (2) expr -> expr expr .
    (2) expr -> expr . expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    CLOSEPARENTHESIS reduce using rule 2 (expr -> expr expr .)
    ZERO            reduce using rule 2 (expr -> expr expr .)
    PRED            reduce using rule 2 (expr -> expr expr .)
    SUCC            reduce using rule 2 (expr -> expr expr .)
    ISZERO          reduce using rule 2 (expr -> expr expr .)
    NUMBER          reduce using rule 2 (expr -> expr expr .)
    TRUE            reduce using rule 2 (expr -> expr expr .)
    FALSE           reduce using rule 2 (expr -> expr expr .)
    IF              reduce using rule 2 (expr -> expr expr .)
    VARIABLE        reduce using rule 2 (expr -> expr expr .)
    BACKSLASH       reduce using rule 2 (expr -> expr expr .)
    $end            reduce using rule 2 (expr -> expr expr .)
    2DOTS           reduce using rule 2 (expr -> expr expr .)
    THEN            reduce using rule 2 (expr -> expr expr .)
    ELSE            reduce using rule 2 (expr -> expr expr .)

  ! ZERO            [ shift and go to state 7 ]
  ! PRED            [ shift and go to state 8 ]
  ! SUCC            [ shift and go to state 4 ]
  ! ISZERO          [ shift and go to state 9 ]
  ! NUMBER          [ shift and go to state 5 ]
  ! TRUE            [ shift and go to state 11 ]
  ! FALSE           [ shift and go to state 1 ]
  ! IF              [ shift and go to state 12 ]
  ! VARIABLE        [ shift and go to state 6 ]
  ! BACKSLASH       [ shift and go to state 2 ]

    expr                           shift and go to state 14

state 15

    (5) expr -> SUCC OPENPARENTHESIS . expr CLOSEPARENTHESIS
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 20

state 16

    (4) expr -> PRED OPENPARENTHESIS . expr CLOSEPARENTHESIS
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 21

state 17

    (6) expr -> ISZERO OPENPARENTHESIS . expr CLOSEPARENTHESIS
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 22

state 18

    (10) expr -> IF expr . THEN expr ELSE expr
    (2) expr -> expr . expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    THEN            shift and go to state 23
    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 14

state 19

    (12) expr -> BACKSLASH expr 2DOTS . funcionType DOT expr
    (13) funcionType -> . TYPE funcImg

    TYPE            shift and go to state 25

    funcionType                    shift and go to state 24

state 20

    (5) expr -> SUCC OPENPARENTHESIS expr . CLOSEPARENTHESIS
    (2) expr -> expr . expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    CLOSEPARENTHESIS shift and go to state 26
    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 14

state 21

    (4) expr -> PRED OPENPARENTHESIS expr . CLOSEPARENTHESIS
    (2) expr -> expr . expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    CLOSEPARENTHESIS shift and go to state 27
    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 14

state 22

    (6) expr -> ISZERO OPENPARENTHESIS expr . CLOSEPARENTHESIS
    (2) expr -> expr . expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    CLOSEPARENTHESIS shift and go to state 28
    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 14

state 23

    (10) expr -> IF expr THEN . expr ELSE expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 29

state 24

    (12) expr -> BACKSLASH expr 2DOTS funcionType . DOT expr

    DOT             shift and go to state 30


state 25

    (13) funcionType -> TYPE . funcImg
    (14) funcImg -> . ARROW funcionType
    (15) funcImg -> .

    ARROW           shift and go to state 32
    DOT             reduce using rule 15 (funcImg -> .)

    funcImg                        shift and go to state 31

state 26

    (5) expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .

    CLOSEPARENTHESIS reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    ZERO            reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    PRED            reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    SUCC            reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    ISZERO          reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    NUMBER          reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    TRUE            reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    FALSE           reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    IF              reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    VARIABLE        reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    BACKSLASH       reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    $end            reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    2DOTS           reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    THEN            reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    ELSE            reduce using rule 5 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)


state 27

    (4) expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .

    CLOSEPARENTHESIS reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    ZERO            reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    PRED            reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    SUCC            reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    ISZERO          reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    NUMBER          reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    TRUE            reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    FALSE           reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    IF              reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    VARIABLE        reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    BACKSLASH       reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    $end            reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    2DOTS           reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    THEN            reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    ELSE            reduce using rule 4 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)


state 28

    (6) expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .

    CLOSEPARENTHESIS reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    ZERO            reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    PRED            reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    SUCC            reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    ISZERO          reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    NUMBER          reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    TRUE            reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    FALSE           reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    IF              reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    VARIABLE        reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    BACKSLASH       reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    $end            reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    2DOTS           reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    THEN            reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    ELSE            reduce using rule 6 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)


state 29

    (10) expr -> IF expr THEN expr . ELSE expr
    (2) expr -> expr . expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    ELSE            shift and go to state 33
    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 14

state 30

    (12) expr -> BACKSLASH expr 2DOTS funcionType DOT . expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 34

state 31

    (13) funcionType -> TYPE funcImg .

    DOT             reduce using rule 13 (funcionType -> TYPE funcImg .)


state 32

    (14) funcImg -> ARROW . funcionType
    (13) funcionType -> . TYPE funcImg

    TYPE            shift and go to state 25

    funcionType                    shift and go to state 35

state 33

    (10) expr -> IF expr THEN expr ELSE . expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    ZERO            shift and go to state 7
    PRED            shift and go to state 8
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 9
    NUMBER          shift and go to state 5
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expr                           shift and go to state 36

state 34

    (12) expr -> BACKSLASH expr 2DOTS funcionType DOT expr .
    (2) expr -> expr . expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    CLOSEPARENTHESIS reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .)
    ZERO            reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .)
    PRED            reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .)
    SUCC            reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .)
    ISZERO          reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .)
    NUMBER          reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .)
    TRUE            reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .)
    FALSE           reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .)
    VARIABLE        reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .)
    BACKSLASH       reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .)
    $end            reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .)
    2DOTS           reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .)
    THEN            reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .)
    ELSE            reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .)
    IF              shift and go to state 12

  ! IF              [ reduce using rule 12 (expr -> BACKSLASH expr 2DOTS funcionType DOT expr .) ]
  ! ZERO            [ shift and go to state 7 ]
  ! PRED            [ shift and go to state 8 ]
  ! SUCC            [ shift and go to state 4 ]
  ! ISZERO          [ shift and go to state 9 ]
  ! NUMBER          [ shift and go to state 5 ]
  ! TRUE            [ shift and go to state 11 ]
  ! FALSE           [ shift and go to state 1 ]
  ! VARIABLE        [ shift and go to state 6 ]
  ! BACKSLASH       [ shift and go to state 2 ]

    expr                           shift and go to state 14

state 35

    (14) funcImg -> ARROW funcionType .

    DOT             reduce using rule 14 (funcImg -> ARROW funcionType .)


state 36

    (10) expr -> IF expr THEN expr ELSE expr .
    (2) expr -> expr . expr
    (2) expr -> . expr expr
    (3) expr -> . ZERO
    (4) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (7) expr -> . NUMBER
    (8) expr -> . TRUE
    (9) expr -> . FALSE
    (10) expr -> . IF expr THEN expr ELSE expr
    (11) expr -> . VARIABLE
    (12) expr -> . BACKSLASH expr 2DOTS funcionType DOT expr

    CLOSEPARENTHESIS reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)
    ZERO            reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)
    PRED            reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)
    SUCC            reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)
    ISZERO          reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)
    NUMBER          reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)
    TRUE            reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)
    FALSE           reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)
    IF              reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)
    VARIABLE        reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)
    BACKSLASH       reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)
    $end            reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)
    2DOTS           reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)
    THEN            reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)
    ELSE            reduce using rule 10 (expr -> IF expr THEN expr ELSE expr .)

  ! ZERO            [ shift and go to state 7 ]
  ! PRED            [ shift and go to state 8 ]
  ! SUCC            [ shift and go to state 4 ]
  ! ISZERO          [ shift and go to state 9 ]
  ! NUMBER          [ shift and go to state 5 ]
  ! TRUE            [ shift and go to state 11 ]
  ! FALSE           [ shift and go to state 1 ]
  ! IF              [ shift and go to state 12 ]
  ! VARIABLE        [ shift and go to state 6 ]
  ! BACKSLASH       [ shift and go to state 2 ]

    expr                           shift and go to state 14
