Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    2DOTS
    BACKSLASH
    ARROW
    VARIABLE
    TYPE
    DOT

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expr
Rule 2     expr -> ZERO
Rule 3     expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
Rule 4     expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
Rule 5     expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
Rule 6     expr -> NUMBER
Rule 7     expr -> TRUE
Rule 8     expr -> FALSE
Rule 9     expr -> IF expr THEN expr ELSE expr

Terminals, with rules where they appear

2DOTS                : 
ARROW                : 
BACKSLASH            : 
CLOSEPARENTHESIS     : 3 4 5
DOT                  : 
ELSE                 : 9
FALSE                : 8
IF                   : 9
ISZERO               : 5
NUMBER               : 6
OPENPARENTHESIS      : 3 4 5
PRED                 : 3
SUCC                 : 4
THEN                 : 9
TRUE                 : 7
TYPE                 : 
VARIABLE             : 
ZERO                 : 2
error                : 

Nonterminals, with rules where they appear

expr                 : 1 3 4 5 9 9 9
expression           : 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expr
    (2) expr -> . ZERO
    (3) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (4) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . NUMBER
    (7) expr -> . TRUE
    (8) expr -> . FALSE
    (9) expr -> . IF expr THEN expr ELSE expr

    ZERO            shift and go to state 5
    PRED            shift and go to state 6
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 7
    NUMBER          shift and go to state 4
    TRUE            shift and go to state 9
    FALSE           shift and go to state 1
    IF              shift and go to state 10

    expr                           shift and go to state 2
    expression                     shift and go to state 8

state 1

    (8) expr -> FALSE .

    CLOSEPARENTHESIS reduce using rule 8 (expr -> FALSE .)
    $end            reduce using rule 8 (expr -> FALSE .)
    THEN            reduce using rule 8 (expr -> FALSE .)
    ELSE            reduce using rule 8 (expr -> FALSE .)


state 2

    (1) expression -> expr .

    $end            reduce using rule 1 (expression -> expr .)


state 3

    (4) expr -> SUCC . OPENPARENTHESIS expr CLOSEPARENTHESIS

    OPENPARENTHESIS shift and go to state 11


state 4

    (6) expr -> NUMBER .

    CLOSEPARENTHESIS reduce using rule 6 (expr -> NUMBER .)
    $end            reduce using rule 6 (expr -> NUMBER .)
    THEN            reduce using rule 6 (expr -> NUMBER .)
    ELSE            reduce using rule 6 (expr -> NUMBER .)


state 5

    (2) expr -> ZERO .

    CLOSEPARENTHESIS reduce using rule 2 (expr -> ZERO .)
    $end            reduce using rule 2 (expr -> ZERO .)
    THEN            reduce using rule 2 (expr -> ZERO .)
    ELSE            reduce using rule 2 (expr -> ZERO .)


state 6

    (3) expr -> PRED . OPENPARENTHESIS expr CLOSEPARENTHESIS

    OPENPARENTHESIS shift and go to state 12


state 7

    (5) expr -> ISZERO . OPENPARENTHESIS expr CLOSEPARENTHESIS

    OPENPARENTHESIS shift and go to state 13


state 8

    (0) S' -> expression .



state 9

    (7) expr -> TRUE .

    CLOSEPARENTHESIS reduce using rule 7 (expr -> TRUE .)
    $end            reduce using rule 7 (expr -> TRUE .)
    THEN            reduce using rule 7 (expr -> TRUE .)
    ELSE            reduce using rule 7 (expr -> TRUE .)


state 10

    (9) expr -> IF . expr THEN expr ELSE expr
    (2) expr -> . ZERO
    (3) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (4) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . NUMBER
    (7) expr -> . TRUE
    (8) expr -> . FALSE
    (9) expr -> . IF expr THEN expr ELSE expr

    ZERO            shift and go to state 5
    PRED            shift and go to state 6
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 7
    NUMBER          shift and go to state 4
    TRUE            shift and go to state 9
    FALSE           shift and go to state 1
    IF              shift and go to state 10

    expr                           shift and go to state 14

state 11

    (4) expr -> SUCC OPENPARENTHESIS . expr CLOSEPARENTHESIS
    (2) expr -> . ZERO
    (3) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (4) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . NUMBER
    (7) expr -> . TRUE
    (8) expr -> . FALSE
    (9) expr -> . IF expr THEN expr ELSE expr

    ZERO            shift and go to state 5
    PRED            shift and go to state 6
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 7
    NUMBER          shift and go to state 4
    TRUE            shift and go to state 9
    FALSE           shift and go to state 1
    IF              shift and go to state 10

    expr                           shift and go to state 15

state 12

    (3) expr -> PRED OPENPARENTHESIS . expr CLOSEPARENTHESIS
    (2) expr -> . ZERO
    (3) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (4) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . NUMBER
    (7) expr -> . TRUE
    (8) expr -> . FALSE
    (9) expr -> . IF expr THEN expr ELSE expr

    ZERO            shift and go to state 5
    PRED            shift and go to state 6
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 7
    NUMBER          shift and go to state 4
    TRUE            shift and go to state 9
    FALSE           shift and go to state 1
    IF              shift and go to state 10

    expr                           shift and go to state 16

state 13

    (5) expr -> ISZERO OPENPARENTHESIS . expr CLOSEPARENTHESIS
    (2) expr -> . ZERO
    (3) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (4) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . NUMBER
    (7) expr -> . TRUE
    (8) expr -> . FALSE
    (9) expr -> . IF expr THEN expr ELSE expr

    ZERO            shift and go to state 5
    PRED            shift and go to state 6
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 7
    NUMBER          shift and go to state 4
    TRUE            shift and go to state 9
    FALSE           shift and go to state 1
    IF              shift and go to state 10

    expr                           shift and go to state 17

state 14

    (9) expr -> IF expr . THEN expr ELSE expr

    THEN            shift and go to state 18


state 15

    (4) expr -> SUCC OPENPARENTHESIS expr . CLOSEPARENTHESIS

    CLOSEPARENTHESIS shift and go to state 19


state 16

    (3) expr -> PRED OPENPARENTHESIS expr . CLOSEPARENTHESIS

    CLOSEPARENTHESIS shift and go to state 20


state 17

    (5) expr -> ISZERO OPENPARENTHESIS expr . CLOSEPARENTHESIS

    CLOSEPARENTHESIS shift and go to state 21


state 18

    (9) expr -> IF expr THEN . expr ELSE expr
    (2) expr -> . ZERO
    (3) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (4) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . NUMBER
    (7) expr -> . TRUE
    (8) expr -> . FALSE
    (9) expr -> . IF expr THEN expr ELSE expr

    ZERO            shift and go to state 5
    PRED            shift and go to state 6
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 7
    NUMBER          shift and go to state 4
    TRUE            shift and go to state 9
    FALSE           shift and go to state 1
    IF              shift and go to state 10

    expr                           shift and go to state 22

state 19

    (4) expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .

    CLOSEPARENTHESIS reduce using rule 4 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    $end            reduce using rule 4 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    THEN            reduce using rule 4 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    ELSE            reduce using rule 4 (expr -> SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS .)


state 20

    (3) expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .

    CLOSEPARENTHESIS reduce using rule 3 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    $end            reduce using rule 3 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    THEN            reduce using rule 3 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    ELSE            reduce using rule 3 (expr -> PRED OPENPARENTHESIS expr CLOSEPARENTHESIS .)


state 21

    (5) expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .

    CLOSEPARENTHESIS reduce using rule 5 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    $end            reduce using rule 5 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    THEN            reduce using rule 5 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)
    ELSE            reduce using rule 5 (expr -> ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS .)


state 22

    (9) expr -> IF expr THEN expr . ELSE expr

    ELSE            shift and go to state 23


state 23

    (9) expr -> IF expr THEN expr ELSE . expr
    (2) expr -> . ZERO
    (3) expr -> . PRED OPENPARENTHESIS expr CLOSEPARENTHESIS
    (4) expr -> . SUCC OPENPARENTHESIS expr CLOSEPARENTHESIS
    (5) expr -> . ISZERO OPENPARENTHESIS expr CLOSEPARENTHESIS
    (6) expr -> . NUMBER
    (7) expr -> . TRUE
    (8) expr -> . FALSE
    (9) expr -> . IF expr THEN expr ELSE expr

    ZERO            shift and go to state 5
    PRED            shift and go to state 6
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 7
    NUMBER          shift and go to state 4
    TRUE            shift and go to state 9
    FALSE           shift and go to state 1
    IF              shift and go to state 10

    expr                           shift and go to state 24

state 24

    (9) expr -> IF expr THEN expr ELSE expr .

    CLOSEPARENTHESIS reduce using rule 9 (expr -> IF expr THEN expr ELSE expr .)
    $end            reduce using rule 9 (expr -> IF expr THEN expr ELSE expr .)
    THEN            reduce using rule 9 (expr -> IF expr THEN expr ELSE expr .)
    ELSE            reduce using rule 9 (expr -> IF expr THEN expr ELSE expr .)

