Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> ZERO
Rule 2     expression -> TRUE
Rule 3     expression -> FALSE
Rule 4     expression -> IF expression THEN expression ELSE expression
Rule 5     expression -> NUMBER
Rule 6     funcionType -> TYPE funcImg
Rule 7     funcImg -> ARROW funcionType
Rule 8     funcImg -> <empty>
Rule 9     expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
Rule 10    expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
Rule 11    expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
Rule 12    expression -> VARIABLE
Rule 13    expression -> BACKSLASH expression 2DOTS funcionType DOT expression
Rule 14    expression -> OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values
Rule 15    expression_values -> expression
Rule 16    expression_values -> <empty>

Terminals, with rules where they appear

2DOTS                : 13
ARROW                : 7
BACKSLASH            : 13
CLOSEPARENTHESIS     : 9 10 11 14
DOT                  : 13
ELSE                 : 4
FALSE                : 3
IF                   : 4
ISZERO               : 11
NUMBER               : 5
OPENPARENTHESIS      : 9 10 11 14
PRED                 : 9
SUCC                 : 10
THEN                 : 4
TRUE                 : 2
TYPE                 : 6
VARIABLE             : 12
ZERO                 : 1
error                : 

Nonterminals, with rules where they appear

expression           : 4 4 4 9 10 11 13 13 14 15 0
expression_values    : 14
funcImg              : 6
funcionType          : 7 13

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (9) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (10) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (11) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (12) expression -> . VARIABLE
    (13) expression -> . BACKSLASH expression 2DOTS funcionType DOT expression
    (14) expression -> . OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values

    ZERO            shift and go to state 7
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2
    OPENPARENTHESIS shift and go to state 10

    expression                     shift and go to state 4

state 1

    (3) expression -> FALSE .

    CLOSEPARENTHESIS reduce using rule 3 (expression -> FALSE .)
    $end            reduce using rule 3 (expression -> FALSE .)
    2DOTS           reduce using rule 3 (expression -> FALSE .)
    THEN            reduce using rule 3 (expression -> FALSE .)
    ELSE            reduce using rule 3 (expression -> FALSE .)


state 2

    (13) expression -> BACKSLASH . expression 2DOTS funcionType DOT expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (9) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (10) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (11) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (12) expression -> . VARIABLE
    (13) expression -> . BACKSLASH expression 2DOTS funcionType DOT expression
    (14) expression -> . OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values

    ZERO            shift and go to state 7
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2
    OPENPARENTHESIS shift and go to state 10

    expression                     shift and go to state 13

state 3

    (10) expression -> SUCC . OPENPARENTHESIS expression CLOSEPARENTHESIS

    OPENPARENTHESIS shift and go to state 14


state 4

    (0) S' -> expression .



state 5

    (5) expression -> NUMBER .

    CLOSEPARENTHESIS reduce using rule 5 (expression -> NUMBER .)
    $end            reduce using rule 5 (expression -> NUMBER .)
    2DOTS           reduce using rule 5 (expression -> NUMBER .)
    THEN            reduce using rule 5 (expression -> NUMBER .)
    ELSE            reduce using rule 5 (expression -> NUMBER .)


state 6

    (12) expression -> VARIABLE .

    CLOSEPARENTHESIS reduce using rule 12 (expression -> VARIABLE .)
    $end            reduce using rule 12 (expression -> VARIABLE .)
    2DOTS           reduce using rule 12 (expression -> VARIABLE .)
    THEN            reduce using rule 12 (expression -> VARIABLE .)
    ELSE            reduce using rule 12 (expression -> VARIABLE .)


state 7

    (1) expression -> ZERO .

    CLOSEPARENTHESIS reduce using rule 1 (expression -> ZERO .)
    $end            reduce using rule 1 (expression -> ZERO .)
    2DOTS           reduce using rule 1 (expression -> ZERO .)
    THEN            reduce using rule 1 (expression -> ZERO .)
    ELSE            reduce using rule 1 (expression -> ZERO .)


state 8

    (9) expression -> PRED . OPENPARENTHESIS expression CLOSEPARENTHESIS

    OPENPARENTHESIS shift and go to state 15


state 9

    (11) expression -> ISZERO . OPENPARENTHESIS expression CLOSEPARENTHESIS

    OPENPARENTHESIS shift and go to state 16


state 10

    (14) expression -> OPENPARENTHESIS . expression CLOSEPARENTHESIS expression_values
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (9) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (10) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (11) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (12) expression -> . VARIABLE
    (13) expression -> . BACKSLASH expression 2DOTS funcionType DOT expression
    (14) expression -> . OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values

    ZERO            shift and go to state 7
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2
    OPENPARENTHESIS shift and go to state 10

    expression                     shift and go to state 17

state 11

    (2) expression -> TRUE .

    CLOSEPARENTHESIS reduce using rule 2 (expression -> TRUE .)
    $end            reduce using rule 2 (expression -> TRUE .)
    2DOTS           reduce using rule 2 (expression -> TRUE .)
    THEN            reduce using rule 2 (expression -> TRUE .)
    ELSE            reduce using rule 2 (expression -> TRUE .)


state 12

    (4) expression -> IF . expression THEN expression ELSE expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (9) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (10) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (11) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (12) expression -> . VARIABLE
    (13) expression -> . BACKSLASH expression 2DOTS funcionType DOT expression
    (14) expression -> . OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values

    ZERO            shift and go to state 7
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2
    OPENPARENTHESIS shift and go to state 10

    expression                     shift and go to state 18

state 13

    (13) expression -> BACKSLASH expression . 2DOTS funcionType DOT expression

    2DOTS           shift and go to state 19


state 14

    (10) expression -> SUCC OPENPARENTHESIS . expression CLOSEPARENTHESIS
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (9) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (10) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (11) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (12) expression -> . VARIABLE
    (13) expression -> . BACKSLASH expression 2DOTS funcionType DOT expression
    (14) expression -> . OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values

    ZERO            shift and go to state 7
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2
    OPENPARENTHESIS shift and go to state 10

    expression                     shift and go to state 20

state 15

    (9) expression -> PRED OPENPARENTHESIS . expression CLOSEPARENTHESIS
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (9) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (10) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (11) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (12) expression -> . VARIABLE
    (13) expression -> . BACKSLASH expression 2DOTS funcionType DOT expression
    (14) expression -> . OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values

    ZERO            shift and go to state 7
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2
    OPENPARENTHESIS shift and go to state 10

    expression                     shift and go to state 21

state 16

    (11) expression -> ISZERO OPENPARENTHESIS . expression CLOSEPARENTHESIS
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (9) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (10) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (11) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (12) expression -> . VARIABLE
    (13) expression -> . BACKSLASH expression 2DOTS funcionType DOT expression
    (14) expression -> . OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values

    ZERO            shift and go to state 7
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2
    OPENPARENTHESIS shift and go to state 10

    expression                     shift and go to state 22

state 17

    (14) expression -> OPENPARENTHESIS expression . CLOSEPARENTHESIS expression_values

    CLOSEPARENTHESIS shift and go to state 23


state 18

    (4) expression -> IF expression . THEN expression ELSE expression

    THEN            shift and go to state 24


state 19

    (13) expression -> BACKSLASH expression 2DOTS . funcionType DOT expression
    (6) funcionType -> . TYPE funcImg

    TYPE            shift and go to state 26

    funcionType                    shift and go to state 25

state 20

    (10) expression -> SUCC OPENPARENTHESIS expression . CLOSEPARENTHESIS

    CLOSEPARENTHESIS shift and go to state 27


state 21

    (9) expression -> PRED OPENPARENTHESIS expression . CLOSEPARENTHESIS

    CLOSEPARENTHESIS shift and go to state 28


state 22

    (11) expression -> ISZERO OPENPARENTHESIS expression . CLOSEPARENTHESIS

    CLOSEPARENTHESIS shift and go to state 29


state 23

    (14) expression -> OPENPARENTHESIS expression CLOSEPARENTHESIS . expression_values
    (15) expression_values -> . expression
    (16) expression_values -> .
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (9) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (10) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (11) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (12) expression -> . VARIABLE
    (13) expression -> . BACKSLASH expression 2DOTS funcionType DOT expression
    (14) expression -> . OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values

    $end            reduce using rule 16 (expression_values -> .)
    2DOTS           reduce using rule 16 (expression_values -> .)
    CLOSEPARENTHESIS reduce using rule 16 (expression_values -> .)
    THEN            reduce using rule 16 (expression_values -> .)
    ELSE            reduce using rule 16 (expression_values -> .)
    ZERO            shift and go to state 7
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2
    OPENPARENTHESIS shift and go to state 10

    expression                     shift and go to state 30
    expression_values              shift and go to state 31

state 24

    (4) expression -> IF expression THEN . expression ELSE expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (9) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (10) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (11) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (12) expression -> . VARIABLE
    (13) expression -> . BACKSLASH expression 2DOTS funcionType DOT expression
    (14) expression -> . OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values

    ZERO            shift and go to state 7
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2
    OPENPARENTHESIS shift and go to state 10

    expression                     shift and go to state 32

state 25

    (13) expression -> BACKSLASH expression 2DOTS funcionType . DOT expression

    DOT             shift and go to state 33


state 26

    (6) funcionType -> TYPE . funcImg
    (7) funcImg -> . ARROW funcionType
    (8) funcImg -> .

    ARROW           shift and go to state 35
    DOT             reduce using rule 8 (funcImg -> .)

    funcImg                        shift and go to state 34

state 27

    (10) expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .

    CLOSEPARENTHESIS reduce using rule 10 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    $end            reduce using rule 10 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    2DOTS           reduce using rule 10 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    THEN            reduce using rule 10 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    ELSE            reduce using rule 10 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)


state 28

    (9) expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .

    CLOSEPARENTHESIS reduce using rule 9 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    $end            reduce using rule 9 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    2DOTS           reduce using rule 9 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    THEN            reduce using rule 9 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    ELSE            reduce using rule 9 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)


state 29

    (11) expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .

    CLOSEPARENTHESIS reduce using rule 11 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    $end            reduce using rule 11 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    2DOTS           reduce using rule 11 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    THEN            reduce using rule 11 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    ELSE            reduce using rule 11 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)


state 30

    (15) expression_values -> expression .

    $end            reduce using rule 15 (expression_values -> expression .)
    2DOTS           reduce using rule 15 (expression_values -> expression .)
    CLOSEPARENTHESIS reduce using rule 15 (expression_values -> expression .)
    THEN            reduce using rule 15 (expression_values -> expression .)
    ELSE            reduce using rule 15 (expression_values -> expression .)


state 31

    (14) expression -> OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values .

    CLOSEPARENTHESIS reduce using rule 14 (expression -> OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values .)
    $end            reduce using rule 14 (expression -> OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values .)
    2DOTS           reduce using rule 14 (expression -> OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values .)
    THEN            reduce using rule 14 (expression -> OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values .)
    ELSE            reduce using rule 14 (expression -> OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values .)


state 32

    (4) expression -> IF expression THEN expression . ELSE expression

    ELSE            shift and go to state 36


state 33

    (13) expression -> BACKSLASH expression 2DOTS funcionType DOT . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (9) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (10) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (11) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (12) expression -> . VARIABLE
    (13) expression -> . BACKSLASH expression 2DOTS funcionType DOT expression
    (14) expression -> . OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values

    ZERO            shift and go to state 7
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2
    OPENPARENTHESIS shift and go to state 10

    expression                     shift and go to state 37

state 34

    (6) funcionType -> TYPE funcImg .

    DOT             reduce using rule 6 (funcionType -> TYPE funcImg .)


state 35

    (7) funcImg -> ARROW . funcionType
    (6) funcionType -> . TYPE funcImg

    TYPE            shift and go to state 26

    funcionType                    shift and go to state 38

state 36

    (4) expression -> IF expression THEN expression ELSE . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (9) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (10) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (11) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (12) expression -> . VARIABLE
    (13) expression -> . BACKSLASH expression 2DOTS funcionType DOT expression
    (14) expression -> . OPENPARENTHESIS expression CLOSEPARENTHESIS expression_values

    ZERO            shift and go to state 7
    TRUE            shift and go to state 11
    FALSE           shift and go to state 1
    IF              shift and go to state 12
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2
    OPENPARENTHESIS shift and go to state 10

    expression                     shift and go to state 39

state 37

    (13) expression -> BACKSLASH expression 2DOTS funcionType DOT expression .

    CLOSEPARENTHESIS reduce using rule 13 (expression -> BACKSLASH expression 2DOTS funcionType DOT expression .)
    $end            reduce using rule 13 (expression -> BACKSLASH expression 2DOTS funcionType DOT expression .)
    2DOTS           reduce using rule 13 (expression -> BACKSLASH expression 2DOTS funcionType DOT expression .)
    THEN            reduce using rule 13 (expression -> BACKSLASH expression 2DOTS funcionType DOT expression .)
    ELSE            reduce using rule 13 (expression -> BACKSLASH expression 2DOTS funcionType DOT expression .)


state 38

    (7) funcImg -> ARROW funcionType .

    DOT             reduce using rule 7 (funcImg -> ARROW funcionType .)


state 39

    (4) expression -> IF expression THEN expression ELSE expression .

    CLOSEPARENTHESIS reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    $end            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    2DOTS           reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    THEN            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    ELSE            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)

