Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    BOOL
    NAT

Grammar

Rule 0     S' -> expression
Rule 1     expression -> ZERO
Rule 2     expression -> TRUE
Rule 3     expression -> FALSE
Rule 4     expression -> IF expression THEN expression ELSE expression
Rule 5     expression -> NUMBER
Rule 6     expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
Rule 7     expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
Rule 8     expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
Rule 9     expression -> VARIABLE
Rule 10    expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression
Rule 11    expression -> expression expression

Terminals, with rules where they appear

2DOTS                : 10
ARROW                : 
BACKSLASH            : 10
BOOL                 : 
CLOSEPARENTHESIS     : 6 7 8
DOT                  : 10
ELSE                 : 4
FALSE                : 3
IF                   : 4
ISZERO               : 8
NAT                  : 
NUMBER               : 5
OPENPARENTHESIS      : 6 7 8
PRED                 : 6
SUCC                 : 7
THEN                 : 4
TRUE                 : 2
VARIABLE             : 9 10
ZERO                 : 1
error                : 

Nonterminals, with rules where they appear

expression           : 4 4 4 6 7 8 10 10 11 11 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 4

state 1

    (3) expression -> FALSE .

    ZERO            reduce using rule 3 (expression -> FALSE .)
    TRUE            reduce using rule 3 (expression -> FALSE .)
    FALSE           reduce using rule 3 (expression -> FALSE .)
    IF              reduce using rule 3 (expression -> FALSE .)
    NUMBER          reduce using rule 3 (expression -> FALSE .)
    PRED            reduce using rule 3 (expression -> FALSE .)
    SUCC            reduce using rule 3 (expression -> FALSE .)
    ISZERO          reduce using rule 3 (expression -> FALSE .)
    VARIABLE        reduce using rule 3 (expression -> FALSE .)
    BACKSLASH       reduce using rule 3 (expression -> FALSE .)
    $end            reduce using rule 3 (expression -> FALSE .)
    THEN            reduce using rule 3 (expression -> FALSE .)
    CLOSEPARENTHESIS reduce using rule 3 (expression -> FALSE .)
    DOT             reduce using rule 3 (expression -> FALSE .)
    ELSE            reduce using rule 3 (expression -> FALSE .)


state 2

    (10) expression -> BACKSLASH . VARIABLE 2DOTS expression DOT expression

    VARIABLE        shift and go to state 12


state 3

    (7) expression -> SUCC . OPENPARENTHESIS expression CLOSEPARENTHESIS

    OPENPARENTHESIS shift and go to state 13


state 4

    (0) S' -> expression .
    (11) expression -> expression . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 14

state 5

    (5) expression -> NUMBER .

    ZERO            reduce using rule 5 (expression -> NUMBER .)
    TRUE            reduce using rule 5 (expression -> NUMBER .)
    FALSE           reduce using rule 5 (expression -> NUMBER .)
    IF              reduce using rule 5 (expression -> NUMBER .)
    NUMBER          reduce using rule 5 (expression -> NUMBER .)
    PRED            reduce using rule 5 (expression -> NUMBER .)
    SUCC            reduce using rule 5 (expression -> NUMBER .)
    ISZERO          reduce using rule 5 (expression -> NUMBER .)
    VARIABLE        reduce using rule 5 (expression -> NUMBER .)
    BACKSLASH       reduce using rule 5 (expression -> NUMBER .)
    $end            reduce using rule 5 (expression -> NUMBER .)
    THEN            reduce using rule 5 (expression -> NUMBER .)
    CLOSEPARENTHESIS reduce using rule 5 (expression -> NUMBER .)
    DOT             reduce using rule 5 (expression -> NUMBER .)
    ELSE            reduce using rule 5 (expression -> NUMBER .)


state 6

    (9) expression -> VARIABLE .

    ZERO            reduce using rule 9 (expression -> VARIABLE .)
    TRUE            reduce using rule 9 (expression -> VARIABLE .)
    FALSE           reduce using rule 9 (expression -> VARIABLE .)
    IF              reduce using rule 9 (expression -> VARIABLE .)
    NUMBER          reduce using rule 9 (expression -> VARIABLE .)
    PRED            reduce using rule 9 (expression -> VARIABLE .)
    SUCC            reduce using rule 9 (expression -> VARIABLE .)
    ISZERO          reduce using rule 9 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 9 (expression -> VARIABLE .)
    BACKSLASH       reduce using rule 9 (expression -> VARIABLE .)
    $end            reduce using rule 9 (expression -> VARIABLE .)
    THEN            reduce using rule 9 (expression -> VARIABLE .)
    CLOSEPARENTHESIS reduce using rule 9 (expression -> VARIABLE .)
    DOT             reduce using rule 9 (expression -> VARIABLE .)
    ELSE            reduce using rule 9 (expression -> VARIABLE .)


state 7

    (1) expression -> ZERO .

    ZERO            reduce using rule 1 (expression -> ZERO .)
    TRUE            reduce using rule 1 (expression -> ZERO .)
    FALSE           reduce using rule 1 (expression -> ZERO .)
    IF              reduce using rule 1 (expression -> ZERO .)
    NUMBER          reduce using rule 1 (expression -> ZERO .)
    PRED            reduce using rule 1 (expression -> ZERO .)
    SUCC            reduce using rule 1 (expression -> ZERO .)
    ISZERO          reduce using rule 1 (expression -> ZERO .)
    VARIABLE        reduce using rule 1 (expression -> ZERO .)
    BACKSLASH       reduce using rule 1 (expression -> ZERO .)
    $end            reduce using rule 1 (expression -> ZERO .)
    THEN            reduce using rule 1 (expression -> ZERO .)
    CLOSEPARENTHESIS reduce using rule 1 (expression -> ZERO .)
    DOT             reduce using rule 1 (expression -> ZERO .)
    ELSE            reduce using rule 1 (expression -> ZERO .)


state 8

    (6) expression -> PRED . OPENPARENTHESIS expression CLOSEPARENTHESIS

    OPENPARENTHESIS shift and go to state 15


state 9

    (8) expression -> ISZERO . OPENPARENTHESIS expression CLOSEPARENTHESIS

    OPENPARENTHESIS shift and go to state 16


state 10

    (2) expression -> TRUE .

    ZERO            reduce using rule 2 (expression -> TRUE .)
    TRUE            reduce using rule 2 (expression -> TRUE .)
    FALSE           reduce using rule 2 (expression -> TRUE .)
    IF              reduce using rule 2 (expression -> TRUE .)
    NUMBER          reduce using rule 2 (expression -> TRUE .)
    PRED            reduce using rule 2 (expression -> TRUE .)
    SUCC            reduce using rule 2 (expression -> TRUE .)
    ISZERO          reduce using rule 2 (expression -> TRUE .)
    VARIABLE        reduce using rule 2 (expression -> TRUE .)
    BACKSLASH       reduce using rule 2 (expression -> TRUE .)
    $end            reduce using rule 2 (expression -> TRUE .)
    THEN            reduce using rule 2 (expression -> TRUE .)
    CLOSEPARENTHESIS reduce using rule 2 (expression -> TRUE .)
    DOT             reduce using rule 2 (expression -> TRUE .)
    ELSE            reduce using rule 2 (expression -> TRUE .)


state 11

    (4) expression -> IF . expression THEN expression ELSE expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 17

state 12

    (10) expression -> BACKSLASH VARIABLE . 2DOTS expression DOT expression

    2DOTS           shift and go to state 18


state 13

    (7) expression -> SUCC OPENPARENTHESIS . expression CLOSEPARENTHESIS
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 19

state 14

    (11) expression -> expression expression .
    (11) expression -> expression . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

  ! shift/reduce conflict for ZERO resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for PRED resolved as shift
  ! shift/reduce conflict for SUCC resolved as shift
  ! shift/reduce conflict for ISZERO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for BACKSLASH resolved as shift
    $end            reduce using rule 11 (expression -> expression expression .)
    THEN            reduce using rule 11 (expression -> expression expression .)
    CLOSEPARENTHESIS reduce using rule 11 (expression -> expression expression .)
    DOT             reduce using rule 11 (expression -> expression expression .)
    ELSE            reduce using rule 11 (expression -> expression expression .)
    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

  ! ZERO            [ reduce using rule 11 (expression -> expression expression .) ]
  ! TRUE            [ reduce using rule 11 (expression -> expression expression .) ]
  ! FALSE           [ reduce using rule 11 (expression -> expression expression .) ]
  ! IF              [ reduce using rule 11 (expression -> expression expression .) ]
  ! NUMBER          [ reduce using rule 11 (expression -> expression expression .) ]
  ! PRED            [ reduce using rule 11 (expression -> expression expression .) ]
  ! SUCC            [ reduce using rule 11 (expression -> expression expression .) ]
  ! ISZERO          [ reduce using rule 11 (expression -> expression expression .) ]
  ! VARIABLE        [ reduce using rule 11 (expression -> expression expression .) ]
  ! BACKSLASH       [ reduce using rule 11 (expression -> expression expression .) ]

    expression                     shift and go to state 14

state 15

    (6) expression -> PRED OPENPARENTHESIS . expression CLOSEPARENTHESIS
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 20

state 16

    (8) expression -> ISZERO OPENPARENTHESIS . expression CLOSEPARENTHESIS
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 21

state 17

    (4) expression -> IF expression . THEN expression ELSE expression
    (11) expression -> expression . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    THEN            shift and go to state 22
    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 14

state 18

    (10) expression -> BACKSLASH VARIABLE 2DOTS . expression DOT expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 23

state 19

    (7) expression -> SUCC OPENPARENTHESIS expression . CLOSEPARENTHESIS
    (11) expression -> expression . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    CLOSEPARENTHESIS shift and go to state 24
    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 14

state 20

    (6) expression -> PRED OPENPARENTHESIS expression . CLOSEPARENTHESIS
    (11) expression -> expression . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    CLOSEPARENTHESIS shift and go to state 25
    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 14

state 21

    (8) expression -> ISZERO OPENPARENTHESIS expression . CLOSEPARENTHESIS
    (11) expression -> expression . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    CLOSEPARENTHESIS shift and go to state 26
    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 14

state 22

    (4) expression -> IF expression THEN . expression ELSE expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 27

state 23

    (10) expression -> BACKSLASH VARIABLE 2DOTS expression . DOT expression
    (11) expression -> expression . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    DOT             shift and go to state 28
    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 14

state 24

    (7) expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .

    ZERO            reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    TRUE            reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    FALSE           reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    IF              reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    NUMBER          reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    PRED            reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    SUCC            reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    ISZERO          reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    VARIABLE        reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    BACKSLASH       reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    $end            reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    THEN            reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    CLOSEPARENTHESIS reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    DOT             reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    ELSE            reduce using rule 7 (expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS .)


state 25

    (6) expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .

    ZERO            reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    TRUE            reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    FALSE           reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    IF              reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    NUMBER          reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    PRED            reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    SUCC            reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    ISZERO          reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    VARIABLE        reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    BACKSLASH       reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    $end            reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    THEN            reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    CLOSEPARENTHESIS reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    DOT             reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    ELSE            reduce using rule 6 (expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS .)


state 26

    (8) expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .

    ZERO            reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    TRUE            reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    FALSE           reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    IF              reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    NUMBER          reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    PRED            reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    SUCC            reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    ISZERO          reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    VARIABLE        reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    BACKSLASH       reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    $end            reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    THEN            reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    CLOSEPARENTHESIS reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    DOT             reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)
    ELSE            reduce using rule 8 (expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS .)


state 27

    (4) expression -> IF expression THEN expression . ELSE expression
    (11) expression -> expression . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    ELSE            shift and go to state 29
    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 14

state 28

    (10) expression -> BACKSLASH VARIABLE 2DOTS expression DOT . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 30

state 29

    (4) expression -> IF expression THEN expression ELSE . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

    expression                     shift and go to state 31

state 30

    (10) expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .
    (11) expression -> expression . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

  ! shift/reduce conflict for ZERO resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for PRED resolved as shift
  ! shift/reduce conflict for SUCC resolved as shift
  ! shift/reduce conflict for ISZERO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for BACKSLASH resolved as shift
    $end            reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .)
    THEN            reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .)
    CLOSEPARENTHESIS reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .)
    DOT             reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .)
    ELSE            reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .)
    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

  ! ZERO            [ reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .) ]
  ! TRUE            [ reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .) ]
  ! FALSE           [ reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .) ]
  ! IF              [ reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .) ]
  ! NUMBER          [ reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .) ]
  ! PRED            [ reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .) ]
  ! SUCC            [ reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .) ]
  ! ISZERO          [ reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .) ]
  ! VARIABLE        [ reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .) ]
  ! BACKSLASH       [ reduce using rule 10 (expression -> BACKSLASH VARIABLE 2DOTS expression DOT expression .) ]

    expression                     shift and go to state 14

state 31

    (4) expression -> IF expression THEN expression ELSE expression .
    (11) expression -> expression . expression
    (1) expression -> . ZERO
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . NUMBER
    (6) expression -> . PRED OPENPARENTHESIS expression CLOSEPARENTHESIS
    (7) expression -> . SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS
    (8) expression -> . ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS
    (9) expression -> . VARIABLE
    (10) expression -> . BACKSLASH VARIABLE 2DOTS expression DOT expression
    (11) expression -> . expression expression

  ! shift/reduce conflict for ZERO resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for PRED resolved as shift
  ! shift/reduce conflict for SUCC resolved as shift
  ! shift/reduce conflict for ISZERO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for BACKSLASH resolved as shift
    $end            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    THEN            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    CLOSEPARENTHESIS reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    DOT             reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    ELSE            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    ZERO            shift and go to state 7
    TRUE            shift and go to state 10
    FALSE           shift and go to state 1
    IF              shift and go to state 11
    NUMBER          shift and go to state 5
    PRED            shift and go to state 8
    SUCC            shift and go to state 3
    ISZERO          shift and go to state 9
    VARIABLE        shift and go to state 6
    BACKSLASH       shift and go to state 2

  ! ZERO            [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! TRUE            [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! FALSE           [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! IF              [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! NUMBER          [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! PRED            [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! SUCC            [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! ISZERO          [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! VARIABLE        [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! BACKSLASH       [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]

    expression                     shift and go to state 14
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ZERO in state 14 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 14 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 14 resolved as shift
WARNING: shift/reduce conflict for IF in state 14 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 14 resolved as shift
WARNING: shift/reduce conflict for PRED in state 14 resolved as shift
WARNING: shift/reduce conflict for SUCC in state 14 resolved as shift
WARNING: shift/reduce conflict for ISZERO in state 14 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 14 resolved as shift
WARNING: shift/reduce conflict for BACKSLASH in state 14 resolved as shift
WARNING: shift/reduce conflict for ZERO in state 30 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 30 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 30 resolved as shift
WARNING: shift/reduce conflict for IF in state 30 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 30 resolved as shift
WARNING: shift/reduce conflict for PRED in state 30 resolved as shift
WARNING: shift/reduce conflict for SUCC in state 30 resolved as shift
WARNING: shift/reduce conflict for ISZERO in state 30 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 30 resolved as shift
WARNING: shift/reduce conflict for BACKSLASH in state 30 resolved as shift
WARNING: shift/reduce conflict for ZERO in state 31 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 31 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 31 resolved as shift
WARNING: shift/reduce conflict for IF in state 31 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 31 resolved as shift
WARNING: shift/reduce conflict for PRED in state 31 resolved as shift
WARNING: shift/reduce conflict for SUCC in state 31 resolved as shift
WARNING: shift/reduce conflict for ISZERO in state 31 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 31 resolved as shift
WARNING: shift/reduce conflict for BACKSLASH in state 31 resolved as shift
