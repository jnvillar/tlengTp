
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'TRUE FALSE IF THEN ELSE ZERO VARIABLE BACKSLASH NUMBER DOT 2DOTS OPENPARENTHESIS CLOSEPARENTHESIS SUCC PRED ISZERO TYPE ARROWexpression : ZEROexpression : TRUEexpression : FALSEexpression : IF expression THEN expression ELSE expressionexpression : NUMBERfuncionType : TYPEexpression : PRED OPENPARENTHESIS expression CLOSEPARENTHESISexpression : SUCC OPENPARENTHESIS expression CLOSEPARENTHESISexpression : ISZERO OPENPARENTHESIS expression CLOSEPARENTHESISexpression : VARIABLEexpression : BACKSLASH expression 2DOTS funcionType DOT expression expression_valuesexpression_values : expressionexpression_values : '
    
_lr_action_items = {'CLOSEPARENTHESIS':([1,5,6,7,10,18,19,20,24,25,26,30,31,32,33,],[-3,-5,-10,-1,-2,24,25,26,-8,-7,-9,-13,-4,-11,-12,]),'THEN':([1,5,6,7,10,16,24,25,26,30,31,32,33,],[-3,-5,-10,-1,-2,21,-8,-7,-9,-13,-4,-11,-12,]),'OPENPARENTHESIS':([3,8,9,],[13,14,15,]),'FALSE':([0,1,2,5,6,7,10,11,13,14,15,21,24,25,26,28,29,30,31,32,33,],[1,-3,1,-5,-10,-1,-2,1,1,1,1,1,-8,-7,-9,1,1,1,-4,-11,-12,]),'PRED':([0,1,2,5,6,7,10,11,13,14,15,21,24,25,26,28,29,30,31,32,33,],[8,-3,8,-5,-10,-1,-2,8,8,8,8,8,-8,-7,-9,8,8,8,-4,-11,-12,]),'2DOTS':([1,5,6,7,10,12,24,25,26,30,31,32,33,],[-3,-5,-10,-1,-2,17,-8,-7,-9,-13,-4,-11,-12,]),'ZERO':([0,1,2,5,6,7,10,11,13,14,15,21,24,25,26,28,29,30,31,32,33,],[7,-3,7,-5,-10,-1,-2,7,7,7,7,7,-8,-7,-9,7,7,7,-4,-11,-12,]),'NUMBER':([0,1,2,5,6,7,10,11,13,14,15,21,24,25,26,28,29,30,31,32,33,],[5,-3,5,-5,-10,-1,-2,5,5,5,5,5,-8,-7,-9,5,5,5,-4,-11,-12,]),'BACKSLASH':([0,1,2,5,6,7,10,11,13,14,15,21,24,25,26,28,29,30,31,32,33,],[2,-3,2,-5,-10,-1,-2,2,2,2,2,2,-8,-7,-9,2,2,2,-4,-11,-12,]),'ISZERO':([0,1,2,5,6,7,10,11,13,14,15,21,24,25,26,28,29,30,31,32,33,],[9,-3,9,-5,-10,-1,-2,9,9,9,9,9,-8,-7,-9,9,9,9,-4,-11,-12,]),'SUCC':([0,1,2,5,6,7,10,11,13,14,15,21,24,25,26,28,29,30,31,32,33,],[3,-3,3,-5,-10,-1,-2,3,3,3,3,3,-8,-7,-9,3,3,3,-4,-11,-12,]),'VARIABLE':([0,1,2,5,6,7,10,11,13,14,15,21,24,25,26,28,29,30,31,32,33,],[6,-3,6,-5,-10,-1,-2,6,6,6,6,6,-8,-7,-9,6,6,6,-4,-11,-12,]),'TYPE':([17,],[23,]),'ELSE':([1,5,6,7,10,24,25,26,27,30,31,32,33,],[-3,-5,-10,-1,-2,-8,-7,-9,29,-13,-4,-11,-12,]),'TRUE':([0,1,2,5,6,7,10,11,13,14,15,21,24,25,26,28,29,30,31,32,33,],[10,-3,10,-5,-10,-1,-2,10,10,10,10,10,-8,-7,-9,10,10,10,-4,-11,-12,]),'$end':([1,4,5,6,7,10,24,25,26,30,31,32,33,],[-3,0,-5,-10,-1,-2,-8,-7,-9,-13,-4,-11,-12,]),'DOT':([22,23,],[28,-6,]),'IF':([0,1,2,5,6,7,10,11,13,14,15,21,24,25,26,28,29,30,31,32,33,],[11,-3,11,-5,-10,-1,-2,11,11,11,11,11,-8,-7,-9,11,11,11,-4,-11,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'funcionType':([17,],[22,]),'expression':([0,2,11,13,14,15,21,28,29,30,],[4,12,16,18,19,20,27,30,31,33,]),'expression_values':([30,],[32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> ZERO','expression',1,'p_expression_zero','parser.py',14),
  ('expression -> TRUE','expression',1,'p_expression_true','parser.py',20),
  ('expression -> FALSE','expression',1,'p_expression_false','parser.py',25),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_expression_if_then_else','parser.py',30),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',41),
  ('funcionType -> TYPE','funcionType',1,'p_expression_type','parser.py',47),
  ('expression -> PRED OPENPARENTHESIS expression CLOSEPARENTHESIS','expression',4,'p_expression_pred','parser.py',50),
  ('expression -> SUCC OPENPARENTHESIS expression CLOSEPARENTHESIS','expression',4,'p_expression_succ','parser.py',55),
  ('expression -> ISZERO OPENPARENTHESIS expression CLOSEPARENTHESIS','expression',4,'p_expression_is_zero','parser.py',61),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',71),
  ('expression -> BACKSLASH expression 2DOTS funcionType DOT expression expression_values','expression',7,'p_expression_lambda','parser.py',99),
  ('expression_values -> expression','expression_values',1,'p_expression_values','parser.py',111),
  ('expression_values -> <empty>','expression_values',0,'p_expression_values_empty','parser.py',115),
]
